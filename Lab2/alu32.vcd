$date
	Sat Sep  7 20:08:11 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alu32_test $end
$var wire 1 ! negative $end
$var wire 1 " zero $end
$var wire 1 # overflow $end
$var wire 32 $ out [31:0] $end
$var reg 32 % A [31:0] $end
$var reg 32 & B [31:0] $end
$var reg 3 ' control [2:0] $end
$scope module a $end
$var wire 32 ( A [31:0] $end
$var wire 32 ) B [31:0] $end
$var wire 3 * control [2:0] $end
$var wire 32 + in [31:0] $end
$var wire 1 ! negative $end
$var wire 1 # overflow $end
$var wire 1 " zero $end
$var wire 32 , out [31:0] $end
$var wire 32 - cout [31:0] $end
$var wire 32 . chain [31:0] $end
$scope module alu0 $end
$var wire 1 / A $end
$var wire 1 0 B $end
$var wire 1 1 carryin $end
$var wire 3 2 control [2:0] $end
$var wire 1 3 w_B $end
$var wire 1 4 sum $end
$var wire 1 5 out $end
$var wire 1 6 lout $end
$var wire 1 7 carryout $end
$scope module fa $end
$var wire 1 / a $end
$var wire 1 3 b $end
$var wire 1 1 cin $end
$var wire 1 7 cout $end
$var wire 1 8 partial_c1 $end
$var wire 1 9 partial_c2 $end
$var wire 1 : partial_s $end
$var wire 1 4 sum $end
$upscope $end
$scope module lu $end
$var wire 1 / A $end
$var wire 1 0 B $end
$var wire 1 ; NOR $end
$var wire 1 < OR $end
$var wire 1 = XOR $end
$var wire 2 > control [1:0] $end
$var wire 1 ? not_A $end
$var wire 1 @ not_B $end
$var wire 1 6 out $end
$var wire 1 A w0 $end
$var wire 1 B w1 $end
$var wire 1 C w2 $end
$var wire 1 D w3 $end
$var wire 1 E w4 $end
$var wire 1 F w5 $end
$var wire 1 G wA $end
$var wire 1 H wN $end
$var wire 1 I wO $end
$var wire 1 J wX $end
$upscope $end
$scope module m2 $end
$var wire 1 4 A $end
$var wire 1 6 B $end
$var wire 1 K control $end
$var wire 1 L not_control $end
$var wire 1 5 out $end
$var wire 1 M wA $end
$var wire 1 N wB $end
$upscope $end
$upscope $end
$scope module alu1 $end
$var wire 1 O A $end
$var wire 1 P B $end
$var wire 1 Q carryin $end
$var wire 3 R control [2:0] $end
$var wire 1 S w_B $end
$var wire 1 T sum $end
$var wire 1 U out $end
$var wire 1 V lout $end
$var wire 1 W carryout $end
$scope module fa $end
$var wire 1 O a $end
$var wire 1 S b $end
$var wire 1 Q cin $end
$var wire 1 W cout $end
$var wire 1 X partial_c1 $end
$var wire 1 Y partial_c2 $end
$var wire 1 Z partial_s $end
$var wire 1 T sum $end
$upscope $end
$scope module lu $end
$var wire 1 O A $end
$var wire 1 P B $end
$var wire 1 [ NOR $end
$var wire 1 \ OR $end
$var wire 1 ] XOR $end
$var wire 2 ^ control [1:0] $end
$var wire 1 _ not_A $end
$var wire 1 ` not_B $end
$var wire 1 V out $end
$var wire 1 a w0 $end
$var wire 1 b w1 $end
$var wire 1 c w2 $end
$var wire 1 d w3 $end
$var wire 1 e w4 $end
$var wire 1 f w5 $end
$var wire 1 g wA $end
$var wire 1 h wN $end
$var wire 1 i wO $end
$var wire 1 j wX $end
$upscope $end
$scope module m2 $end
$var wire 1 T A $end
$var wire 1 V B $end
$var wire 1 k control $end
$var wire 1 l not_control $end
$var wire 1 U out $end
$var wire 1 m wA $end
$var wire 1 n wB $end
$upscope $end
$upscope $end
$scope module alu10 $end
$var wire 1 o A $end
$var wire 1 p B $end
$var wire 1 q carryin $end
$var wire 3 r control [2:0] $end
$var wire 1 s w_B $end
$var wire 1 t sum $end
$var wire 1 u out $end
$var wire 1 v lout $end
$var wire 1 w carryout $end
$scope module fa $end
$var wire 1 o a $end
$var wire 1 s b $end
$var wire 1 q cin $end
$var wire 1 w cout $end
$var wire 1 x partial_c1 $end
$var wire 1 y partial_c2 $end
$var wire 1 z partial_s $end
$var wire 1 t sum $end
$upscope $end
$scope module lu $end
$var wire 1 o A $end
$var wire 1 p B $end
$var wire 1 { NOR $end
$var wire 1 | OR $end
$var wire 1 } XOR $end
$var wire 2 ~ control [1:0] $end
$var wire 1 !" not_A $end
$var wire 1 "" not_B $end
$var wire 1 v out $end
$var wire 1 #" w0 $end
$var wire 1 $" w1 $end
$var wire 1 %" w2 $end
$var wire 1 &" w3 $end
$var wire 1 '" w4 $end
$var wire 1 (" w5 $end
$var wire 1 )" wA $end
$var wire 1 *" wN $end
$var wire 1 +" wO $end
$var wire 1 ," wX $end
$upscope $end
$scope module m2 $end
$var wire 1 t A $end
$var wire 1 v B $end
$var wire 1 -" control $end
$var wire 1 ." not_control $end
$var wire 1 u out $end
$var wire 1 /" wA $end
$var wire 1 0" wB $end
$upscope $end
$upscope $end
$scope module alu11 $end
$var wire 1 1" A $end
$var wire 1 2" B $end
$var wire 1 3" carryin $end
$var wire 3 4" control [2:0] $end
$var wire 1 5" w_B $end
$var wire 1 6" sum $end
$var wire 1 7" out $end
$var wire 1 8" lout $end
$var wire 1 9" carryout $end
$scope module fa $end
$var wire 1 1" a $end
$var wire 1 5" b $end
$var wire 1 3" cin $end
$var wire 1 9" cout $end
$var wire 1 :" partial_c1 $end
$var wire 1 ;" partial_c2 $end
$var wire 1 <" partial_s $end
$var wire 1 6" sum $end
$upscope $end
$scope module lu $end
$var wire 1 1" A $end
$var wire 1 2" B $end
$var wire 1 =" NOR $end
$var wire 1 >" OR $end
$var wire 1 ?" XOR $end
$var wire 2 @" control [1:0] $end
$var wire 1 A" not_A $end
$var wire 1 B" not_B $end
$var wire 1 8" out $end
$var wire 1 C" w0 $end
$var wire 1 D" w1 $end
$var wire 1 E" w2 $end
$var wire 1 F" w3 $end
$var wire 1 G" w4 $end
$var wire 1 H" w5 $end
$var wire 1 I" wA $end
$var wire 1 J" wN $end
$var wire 1 K" wO $end
$var wire 1 L" wX $end
$upscope $end
$scope module m2 $end
$var wire 1 6" A $end
$var wire 1 8" B $end
$var wire 1 M" control $end
$var wire 1 N" not_control $end
$var wire 1 7" out $end
$var wire 1 O" wA $end
$var wire 1 P" wB $end
$upscope $end
$upscope $end
$scope module alu12 $end
$var wire 1 Q" A $end
$var wire 1 R" B $end
$var wire 1 S" carryin $end
$var wire 3 T" control [2:0] $end
$var wire 1 U" w_B $end
$var wire 1 V" sum $end
$var wire 1 W" out $end
$var wire 1 X" lout $end
$var wire 1 Y" carryout $end
$scope module fa $end
$var wire 1 Q" a $end
$var wire 1 U" b $end
$var wire 1 S" cin $end
$var wire 1 Y" cout $end
$var wire 1 Z" partial_c1 $end
$var wire 1 [" partial_c2 $end
$var wire 1 \" partial_s $end
$var wire 1 V" sum $end
$upscope $end
$scope module lu $end
$var wire 1 Q" A $end
$var wire 1 R" B $end
$var wire 1 ]" NOR $end
$var wire 1 ^" OR $end
$var wire 1 _" XOR $end
$var wire 2 `" control [1:0] $end
$var wire 1 a" not_A $end
$var wire 1 b" not_B $end
$var wire 1 X" out $end
$var wire 1 c" w0 $end
$var wire 1 d" w1 $end
$var wire 1 e" w2 $end
$var wire 1 f" w3 $end
$var wire 1 g" w4 $end
$var wire 1 h" w5 $end
$var wire 1 i" wA $end
$var wire 1 j" wN $end
$var wire 1 k" wO $end
$var wire 1 l" wX $end
$upscope $end
$scope module m2 $end
$var wire 1 V" A $end
$var wire 1 X" B $end
$var wire 1 m" control $end
$var wire 1 n" not_control $end
$var wire 1 W" out $end
$var wire 1 o" wA $end
$var wire 1 p" wB $end
$upscope $end
$upscope $end
$scope module alu13 $end
$var wire 1 q" A $end
$var wire 1 r" B $end
$var wire 1 s" carryin $end
$var wire 3 t" control [2:0] $end
$var wire 1 u" w_B $end
$var wire 1 v" sum $end
$var wire 1 w" out $end
$var wire 1 x" lout $end
$var wire 1 y" carryout $end
$scope module fa $end
$var wire 1 q" a $end
$var wire 1 u" b $end
$var wire 1 s" cin $end
$var wire 1 y" cout $end
$var wire 1 z" partial_c1 $end
$var wire 1 {" partial_c2 $end
$var wire 1 |" partial_s $end
$var wire 1 v" sum $end
$upscope $end
$scope module lu $end
$var wire 1 q" A $end
$var wire 1 r" B $end
$var wire 1 }" NOR $end
$var wire 1 ~" OR $end
$var wire 1 !# XOR $end
$var wire 2 "# control [1:0] $end
$var wire 1 ## not_A $end
$var wire 1 $# not_B $end
$var wire 1 x" out $end
$var wire 1 %# w0 $end
$var wire 1 &# w1 $end
$var wire 1 '# w2 $end
$var wire 1 (# w3 $end
$var wire 1 )# w4 $end
$var wire 1 *# w5 $end
$var wire 1 +# wA $end
$var wire 1 ,# wN $end
$var wire 1 -# wO $end
$var wire 1 .# wX $end
$upscope $end
$scope module m2 $end
$var wire 1 v" A $end
$var wire 1 x" B $end
$var wire 1 /# control $end
$var wire 1 0# not_control $end
$var wire 1 w" out $end
$var wire 1 1# wA $end
$var wire 1 2# wB $end
$upscope $end
$upscope $end
$scope module alu14 $end
$var wire 1 3# A $end
$var wire 1 4# B $end
$var wire 1 5# carryin $end
$var wire 3 6# control [2:0] $end
$var wire 1 7# w_B $end
$var wire 1 8# sum $end
$var wire 1 9# out $end
$var wire 1 :# lout $end
$var wire 1 ;# carryout $end
$scope module fa $end
$var wire 1 3# a $end
$var wire 1 7# b $end
$var wire 1 5# cin $end
$var wire 1 ;# cout $end
$var wire 1 <# partial_c1 $end
$var wire 1 =# partial_c2 $end
$var wire 1 ># partial_s $end
$var wire 1 8# sum $end
$upscope $end
$scope module lu $end
$var wire 1 3# A $end
$var wire 1 4# B $end
$var wire 1 ?# NOR $end
$var wire 1 @# OR $end
$var wire 1 A# XOR $end
$var wire 2 B# control [1:0] $end
$var wire 1 C# not_A $end
$var wire 1 D# not_B $end
$var wire 1 :# out $end
$var wire 1 E# w0 $end
$var wire 1 F# w1 $end
$var wire 1 G# w2 $end
$var wire 1 H# w3 $end
$var wire 1 I# w4 $end
$var wire 1 J# w5 $end
$var wire 1 K# wA $end
$var wire 1 L# wN $end
$var wire 1 M# wO $end
$var wire 1 N# wX $end
$upscope $end
$scope module m2 $end
$var wire 1 8# A $end
$var wire 1 :# B $end
$var wire 1 O# control $end
$var wire 1 P# not_control $end
$var wire 1 9# out $end
$var wire 1 Q# wA $end
$var wire 1 R# wB $end
$upscope $end
$upscope $end
$scope module alu15 $end
$var wire 1 S# A $end
$var wire 1 T# B $end
$var wire 1 U# carryin $end
$var wire 3 V# control [2:0] $end
$var wire 1 W# w_B $end
$var wire 1 X# sum $end
$var wire 1 Y# out $end
$var wire 1 Z# lout $end
$var wire 1 [# carryout $end
$scope module fa $end
$var wire 1 S# a $end
$var wire 1 W# b $end
$var wire 1 U# cin $end
$var wire 1 [# cout $end
$var wire 1 \# partial_c1 $end
$var wire 1 ]# partial_c2 $end
$var wire 1 ^# partial_s $end
$var wire 1 X# sum $end
$upscope $end
$scope module lu $end
$var wire 1 S# A $end
$var wire 1 T# B $end
$var wire 1 _# NOR $end
$var wire 1 `# OR $end
$var wire 1 a# XOR $end
$var wire 2 b# control [1:0] $end
$var wire 1 c# not_A $end
$var wire 1 d# not_B $end
$var wire 1 Z# out $end
$var wire 1 e# w0 $end
$var wire 1 f# w1 $end
$var wire 1 g# w2 $end
$var wire 1 h# w3 $end
$var wire 1 i# w4 $end
$var wire 1 j# w5 $end
$var wire 1 k# wA $end
$var wire 1 l# wN $end
$var wire 1 m# wO $end
$var wire 1 n# wX $end
$upscope $end
$scope module m2 $end
$var wire 1 X# A $end
$var wire 1 Z# B $end
$var wire 1 o# control $end
$var wire 1 p# not_control $end
$var wire 1 Y# out $end
$var wire 1 q# wA $end
$var wire 1 r# wB $end
$upscope $end
$upscope $end
$scope module alu16 $end
$var wire 1 s# A $end
$var wire 1 t# B $end
$var wire 1 u# carryin $end
$var wire 3 v# control [2:0] $end
$var wire 1 w# w_B $end
$var wire 1 x# sum $end
$var wire 1 y# out $end
$var wire 1 z# lout $end
$var wire 1 {# carryout $end
$scope module fa $end
$var wire 1 s# a $end
$var wire 1 w# b $end
$var wire 1 u# cin $end
$var wire 1 {# cout $end
$var wire 1 |# partial_c1 $end
$var wire 1 }# partial_c2 $end
$var wire 1 ~# partial_s $end
$var wire 1 x# sum $end
$upscope $end
$scope module lu $end
$var wire 1 s# A $end
$var wire 1 t# B $end
$var wire 1 !$ NOR $end
$var wire 1 "$ OR $end
$var wire 1 #$ XOR $end
$var wire 2 $$ control [1:0] $end
$var wire 1 %$ not_A $end
$var wire 1 &$ not_B $end
$var wire 1 z# out $end
$var wire 1 '$ w0 $end
$var wire 1 ($ w1 $end
$var wire 1 )$ w2 $end
$var wire 1 *$ w3 $end
$var wire 1 +$ w4 $end
$var wire 1 ,$ w5 $end
$var wire 1 -$ wA $end
$var wire 1 .$ wN $end
$var wire 1 /$ wO $end
$var wire 1 0$ wX $end
$upscope $end
$scope module m2 $end
$var wire 1 x# A $end
$var wire 1 z# B $end
$var wire 1 1$ control $end
$var wire 1 2$ not_control $end
$var wire 1 y# out $end
$var wire 1 3$ wA $end
$var wire 1 4$ wB $end
$upscope $end
$upscope $end
$scope module alu17 $end
$var wire 1 5$ A $end
$var wire 1 6$ B $end
$var wire 1 7$ carryin $end
$var wire 3 8$ control [2:0] $end
$var wire 1 9$ w_B $end
$var wire 1 :$ sum $end
$var wire 1 ;$ out $end
$var wire 1 <$ lout $end
$var wire 1 =$ carryout $end
$scope module fa $end
$var wire 1 5$ a $end
$var wire 1 9$ b $end
$var wire 1 7$ cin $end
$var wire 1 =$ cout $end
$var wire 1 >$ partial_c1 $end
$var wire 1 ?$ partial_c2 $end
$var wire 1 @$ partial_s $end
$var wire 1 :$ sum $end
$upscope $end
$scope module lu $end
$var wire 1 5$ A $end
$var wire 1 6$ B $end
$var wire 1 A$ NOR $end
$var wire 1 B$ OR $end
$var wire 1 C$ XOR $end
$var wire 2 D$ control [1:0] $end
$var wire 1 E$ not_A $end
$var wire 1 F$ not_B $end
$var wire 1 <$ out $end
$var wire 1 G$ w0 $end
$var wire 1 H$ w1 $end
$var wire 1 I$ w2 $end
$var wire 1 J$ w3 $end
$var wire 1 K$ w4 $end
$var wire 1 L$ w5 $end
$var wire 1 M$ wA $end
$var wire 1 N$ wN $end
$var wire 1 O$ wO $end
$var wire 1 P$ wX $end
$upscope $end
$scope module m2 $end
$var wire 1 :$ A $end
$var wire 1 <$ B $end
$var wire 1 Q$ control $end
$var wire 1 R$ not_control $end
$var wire 1 ;$ out $end
$var wire 1 S$ wA $end
$var wire 1 T$ wB $end
$upscope $end
$upscope $end
$scope module alu18 $end
$var wire 1 U$ A $end
$var wire 1 V$ B $end
$var wire 1 W$ carryin $end
$var wire 3 X$ control [2:0] $end
$var wire 1 Y$ w_B $end
$var wire 1 Z$ sum $end
$var wire 1 [$ out $end
$var wire 1 \$ lout $end
$var wire 1 ]$ carryout $end
$scope module fa $end
$var wire 1 U$ a $end
$var wire 1 Y$ b $end
$var wire 1 W$ cin $end
$var wire 1 ]$ cout $end
$var wire 1 ^$ partial_c1 $end
$var wire 1 _$ partial_c2 $end
$var wire 1 `$ partial_s $end
$var wire 1 Z$ sum $end
$upscope $end
$scope module lu $end
$var wire 1 U$ A $end
$var wire 1 V$ B $end
$var wire 1 a$ NOR $end
$var wire 1 b$ OR $end
$var wire 1 c$ XOR $end
$var wire 2 d$ control [1:0] $end
$var wire 1 e$ not_A $end
$var wire 1 f$ not_B $end
$var wire 1 \$ out $end
$var wire 1 g$ w0 $end
$var wire 1 h$ w1 $end
$var wire 1 i$ w2 $end
$var wire 1 j$ w3 $end
$var wire 1 k$ w4 $end
$var wire 1 l$ w5 $end
$var wire 1 m$ wA $end
$var wire 1 n$ wN $end
$var wire 1 o$ wO $end
$var wire 1 p$ wX $end
$upscope $end
$scope module m2 $end
$var wire 1 Z$ A $end
$var wire 1 \$ B $end
$var wire 1 q$ control $end
$var wire 1 r$ not_control $end
$var wire 1 [$ out $end
$var wire 1 s$ wA $end
$var wire 1 t$ wB $end
$upscope $end
$upscope $end
$scope module alu19 $end
$var wire 1 u$ A $end
$var wire 1 v$ B $end
$var wire 1 w$ carryin $end
$var wire 3 x$ control [2:0] $end
$var wire 1 y$ w_B $end
$var wire 1 z$ sum $end
$var wire 1 {$ out $end
$var wire 1 |$ lout $end
$var wire 1 }$ carryout $end
$scope module fa $end
$var wire 1 u$ a $end
$var wire 1 y$ b $end
$var wire 1 w$ cin $end
$var wire 1 }$ cout $end
$var wire 1 ~$ partial_c1 $end
$var wire 1 !% partial_c2 $end
$var wire 1 "% partial_s $end
$var wire 1 z$ sum $end
$upscope $end
$scope module lu $end
$var wire 1 u$ A $end
$var wire 1 v$ B $end
$var wire 1 #% NOR $end
$var wire 1 $% OR $end
$var wire 1 %% XOR $end
$var wire 2 &% control [1:0] $end
$var wire 1 '% not_A $end
$var wire 1 (% not_B $end
$var wire 1 |$ out $end
$var wire 1 )% w0 $end
$var wire 1 *% w1 $end
$var wire 1 +% w2 $end
$var wire 1 ,% w3 $end
$var wire 1 -% w4 $end
$var wire 1 .% w5 $end
$var wire 1 /% wA $end
$var wire 1 0% wN $end
$var wire 1 1% wO $end
$var wire 1 2% wX $end
$upscope $end
$scope module m2 $end
$var wire 1 z$ A $end
$var wire 1 |$ B $end
$var wire 1 3% control $end
$var wire 1 4% not_control $end
$var wire 1 {$ out $end
$var wire 1 5% wA $end
$var wire 1 6% wB $end
$upscope $end
$upscope $end
$scope module alu2 $end
$var wire 1 7% A $end
$var wire 1 8% B $end
$var wire 1 9% carryin $end
$var wire 3 :% control [2:0] $end
$var wire 1 ;% w_B $end
$var wire 1 <% sum $end
$var wire 1 =% out $end
$var wire 1 >% lout $end
$var wire 1 ?% carryout $end
$scope module fa $end
$var wire 1 7% a $end
$var wire 1 ;% b $end
$var wire 1 9% cin $end
$var wire 1 ?% cout $end
$var wire 1 @% partial_c1 $end
$var wire 1 A% partial_c2 $end
$var wire 1 B% partial_s $end
$var wire 1 <% sum $end
$upscope $end
$scope module lu $end
$var wire 1 7% A $end
$var wire 1 8% B $end
$var wire 1 C% NOR $end
$var wire 1 D% OR $end
$var wire 1 E% XOR $end
$var wire 2 F% control [1:0] $end
$var wire 1 G% not_A $end
$var wire 1 H% not_B $end
$var wire 1 >% out $end
$var wire 1 I% w0 $end
$var wire 1 J% w1 $end
$var wire 1 K% w2 $end
$var wire 1 L% w3 $end
$var wire 1 M% w4 $end
$var wire 1 N% w5 $end
$var wire 1 O% wA $end
$var wire 1 P% wN $end
$var wire 1 Q% wO $end
$var wire 1 R% wX $end
$upscope $end
$scope module m2 $end
$var wire 1 <% A $end
$var wire 1 >% B $end
$var wire 1 S% control $end
$var wire 1 T% not_control $end
$var wire 1 =% out $end
$var wire 1 U% wA $end
$var wire 1 V% wB $end
$upscope $end
$upscope $end
$scope module alu20 $end
$var wire 1 W% A $end
$var wire 1 X% B $end
$var wire 1 Y% carryin $end
$var wire 3 Z% control [2:0] $end
$var wire 1 [% w_B $end
$var wire 1 \% sum $end
$var wire 1 ]% out $end
$var wire 1 ^% lout $end
$var wire 1 _% carryout $end
$scope module fa $end
$var wire 1 W% a $end
$var wire 1 [% b $end
$var wire 1 Y% cin $end
$var wire 1 _% cout $end
$var wire 1 `% partial_c1 $end
$var wire 1 a% partial_c2 $end
$var wire 1 b% partial_s $end
$var wire 1 \% sum $end
$upscope $end
$scope module lu $end
$var wire 1 W% A $end
$var wire 1 X% B $end
$var wire 1 c% NOR $end
$var wire 1 d% OR $end
$var wire 1 e% XOR $end
$var wire 2 f% control [1:0] $end
$var wire 1 g% not_A $end
$var wire 1 h% not_B $end
$var wire 1 ^% out $end
$var wire 1 i% w0 $end
$var wire 1 j% w1 $end
$var wire 1 k% w2 $end
$var wire 1 l% w3 $end
$var wire 1 m% w4 $end
$var wire 1 n% w5 $end
$var wire 1 o% wA $end
$var wire 1 p% wN $end
$var wire 1 q% wO $end
$var wire 1 r% wX $end
$upscope $end
$scope module m2 $end
$var wire 1 \% A $end
$var wire 1 ^% B $end
$var wire 1 s% control $end
$var wire 1 t% not_control $end
$var wire 1 ]% out $end
$var wire 1 u% wA $end
$var wire 1 v% wB $end
$upscope $end
$upscope $end
$scope module alu21 $end
$var wire 1 w% A $end
$var wire 1 x% B $end
$var wire 1 y% carryin $end
$var wire 3 z% control [2:0] $end
$var wire 1 {% w_B $end
$var wire 1 |% sum $end
$var wire 1 }% out $end
$var wire 1 ~% lout $end
$var wire 1 !& carryout $end
$scope module fa $end
$var wire 1 w% a $end
$var wire 1 {% b $end
$var wire 1 y% cin $end
$var wire 1 !& cout $end
$var wire 1 "& partial_c1 $end
$var wire 1 #& partial_c2 $end
$var wire 1 $& partial_s $end
$var wire 1 |% sum $end
$upscope $end
$scope module lu $end
$var wire 1 w% A $end
$var wire 1 x% B $end
$var wire 1 %& NOR $end
$var wire 1 && OR $end
$var wire 1 '& XOR $end
$var wire 2 (& control [1:0] $end
$var wire 1 )& not_A $end
$var wire 1 *& not_B $end
$var wire 1 ~% out $end
$var wire 1 +& w0 $end
$var wire 1 ,& w1 $end
$var wire 1 -& w2 $end
$var wire 1 .& w3 $end
$var wire 1 /& w4 $end
$var wire 1 0& w5 $end
$var wire 1 1& wA $end
$var wire 1 2& wN $end
$var wire 1 3& wO $end
$var wire 1 4& wX $end
$upscope $end
$scope module m2 $end
$var wire 1 |% A $end
$var wire 1 ~% B $end
$var wire 1 5& control $end
$var wire 1 6& not_control $end
$var wire 1 }% out $end
$var wire 1 7& wA $end
$var wire 1 8& wB $end
$upscope $end
$upscope $end
$scope module alu22 $end
$var wire 1 9& A $end
$var wire 1 :& B $end
$var wire 1 ;& carryin $end
$var wire 3 <& control [2:0] $end
$var wire 1 =& w_B $end
$var wire 1 >& sum $end
$var wire 1 ?& out $end
$var wire 1 @& lout $end
$var wire 1 A& carryout $end
$scope module fa $end
$var wire 1 9& a $end
$var wire 1 =& b $end
$var wire 1 ;& cin $end
$var wire 1 A& cout $end
$var wire 1 B& partial_c1 $end
$var wire 1 C& partial_c2 $end
$var wire 1 D& partial_s $end
$var wire 1 >& sum $end
$upscope $end
$scope module lu $end
$var wire 1 9& A $end
$var wire 1 :& B $end
$var wire 1 E& NOR $end
$var wire 1 F& OR $end
$var wire 1 G& XOR $end
$var wire 2 H& control [1:0] $end
$var wire 1 I& not_A $end
$var wire 1 J& not_B $end
$var wire 1 @& out $end
$var wire 1 K& w0 $end
$var wire 1 L& w1 $end
$var wire 1 M& w2 $end
$var wire 1 N& w3 $end
$var wire 1 O& w4 $end
$var wire 1 P& w5 $end
$var wire 1 Q& wA $end
$var wire 1 R& wN $end
$var wire 1 S& wO $end
$var wire 1 T& wX $end
$upscope $end
$scope module m2 $end
$var wire 1 >& A $end
$var wire 1 @& B $end
$var wire 1 U& control $end
$var wire 1 V& not_control $end
$var wire 1 ?& out $end
$var wire 1 W& wA $end
$var wire 1 X& wB $end
$upscope $end
$upscope $end
$scope module alu23 $end
$var wire 1 Y& A $end
$var wire 1 Z& B $end
$var wire 1 [& carryin $end
$var wire 3 \& control [2:0] $end
$var wire 1 ]& w_B $end
$var wire 1 ^& sum $end
$var wire 1 _& out $end
$var wire 1 `& lout $end
$var wire 1 a& carryout $end
$scope module fa $end
$var wire 1 Y& a $end
$var wire 1 ]& b $end
$var wire 1 [& cin $end
$var wire 1 a& cout $end
$var wire 1 b& partial_c1 $end
$var wire 1 c& partial_c2 $end
$var wire 1 d& partial_s $end
$var wire 1 ^& sum $end
$upscope $end
$scope module lu $end
$var wire 1 Y& A $end
$var wire 1 Z& B $end
$var wire 1 e& NOR $end
$var wire 1 f& OR $end
$var wire 1 g& XOR $end
$var wire 2 h& control [1:0] $end
$var wire 1 i& not_A $end
$var wire 1 j& not_B $end
$var wire 1 `& out $end
$var wire 1 k& w0 $end
$var wire 1 l& w1 $end
$var wire 1 m& w2 $end
$var wire 1 n& w3 $end
$var wire 1 o& w4 $end
$var wire 1 p& w5 $end
$var wire 1 q& wA $end
$var wire 1 r& wN $end
$var wire 1 s& wO $end
$var wire 1 t& wX $end
$upscope $end
$scope module m2 $end
$var wire 1 ^& A $end
$var wire 1 `& B $end
$var wire 1 u& control $end
$var wire 1 v& not_control $end
$var wire 1 _& out $end
$var wire 1 w& wA $end
$var wire 1 x& wB $end
$upscope $end
$upscope $end
$scope module alu24 $end
$var wire 1 y& A $end
$var wire 1 z& B $end
$var wire 1 {& carryin $end
$var wire 3 |& control [2:0] $end
$var wire 1 }& w_B $end
$var wire 1 ~& sum $end
$var wire 1 !' out $end
$var wire 1 "' lout $end
$var wire 1 #' carryout $end
$scope module fa $end
$var wire 1 y& a $end
$var wire 1 }& b $end
$var wire 1 {& cin $end
$var wire 1 #' cout $end
$var wire 1 $' partial_c1 $end
$var wire 1 %' partial_c2 $end
$var wire 1 &' partial_s $end
$var wire 1 ~& sum $end
$upscope $end
$scope module lu $end
$var wire 1 y& A $end
$var wire 1 z& B $end
$var wire 1 '' NOR $end
$var wire 1 (' OR $end
$var wire 1 )' XOR $end
$var wire 2 *' control [1:0] $end
$var wire 1 +' not_A $end
$var wire 1 ,' not_B $end
$var wire 1 "' out $end
$var wire 1 -' w0 $end
$var wire 1 .' w1 $end
$var wire 1 /' w2 $end
$var wire 1 0' w3 $end
$var wire 1 1' w4 $end
$var wire 1 2' w5 $end
$var wire 1 3' wA $end
$var wire 1 4' wN $end
$var wire 1 5' wO $end
$var wire 1 6' wX $end
$upscope $end
$scope module m2 $end
$var wire 1 ~& A $end
$var wire 1 "' B $end
$var wire 1 7' control $end
$var wire 1 8' not_control $end
$var wire 1 !' out $end
$var wire 1 9' wA $end
$var wire 1 :' wB $end
$upscope $end
$upscope $end
$scope module alu25 $end
$var wire 1 ;' A $end
$var wire 1 <' B $end
$var wire 1 =' carryin $end
$var wire 3 >' control [2:0] $end
$var wire 1 ?' w_B $end
$var wire 1 @' sum $end
$var wire 1 A' out $end
$var wire 1 B' lout $end
$var wire 1 C' carryout $end
$scope module fa $end
$var wire 1 ;' a $end
$var wire 1 ?' b $end
$var wire 1 =' cin $end
$var wire 1 C' cout $end
$var wire 1 D' partial_c1 $end
$var wire 1 E' partial_c2 $end
$var wire 1 F' partial_s $end
$var wire 1 @' sum $end
$upscope $end
$scope module lu $end
$var wire 1 ;' A $end
$var wire 1 <' B $end
$var wire 1 G' NOR $end
$var wire 1 H' OR $end
$var wire 1 I' XOR $end
$var wire 2 J' control [1:0] $end
$var wire 1 K' not_A $end
$var wire 1 L' not_B $end
$var wire 1 B' out $end
$var wire 1 M' w0 $end
$var wire 1 N' w1 $end
$var wire 1 O' w2 $end
$var wire 1 P' w3 $end
$var wire 1 Q' w4 $end
$var wire 1 R' w5 $end
$var wire 1 S' wA $end
$var wire 1 T' wN $end
$var wire 1 U' wO $end
$var wire 1 V' wX $end
$upscope $end
$scope module m2 $end
$var wire 1 @' A $end
$var wire 1 B' B $end
$var wire 1 W' control $end
$var wire 1 X' not_control $end
$var wire 1 A' out $end
$var wire 1 Y' wA $end
$var wire 1 Z' wB $end
$upscope $end
$upscope $end
$scope module alu26 $end
$var wire 1 [' A $end
$var wire 1 \' B $end
$var wire 1 ]' carryin $end
$var wire 3 ^' control [2:0] $end
$var wire 1 _' w_B $end
$var wire 1 `' sum $end
$var wire 1 a' out $end
$var wire 1 b' lout $end
$var wire 1 c' carryout $end
$scope module fa $end
$var wire 1 [' a $end
$var wire 1 _' b $end
$var wire 1 ]' cin $end
$var wire 1 c' cout $end
$var wire 1 d' partial_c1 $end
$var wire 1 e' partial_c2 $end
$var wire 1 f' partial_s $end
$var wire 1 `' sum $end
$upscope $end
$scope module lu $end
$var wire 1 [' A $end
$var wire 1 \' B $end
$var wire 1 g' NOR $end
$var wire 1 h' OR $end
$var wire 1 i' XOR $end
$var wire 2 j' control [1:0] $end
$var wire 1 k' not_A $end
$var wire 1 l' not_B $end
$var wire 1 b' out $end
$var wire 1 m' w0 $end
$var wire 1 n' w1 $end
$var wire 1 o' w2 $end
$var wire 1 p' w3 $end
$var wire 1 q' w4 $end
$var wire 1 r' w5 $end
$var wire 1 s' wA $end
$var wire 1 t' wN $end
$var wire 1 u' wO $end
$var wire 1 v' wX $end
$upscope $end
$scope module m2 $end
$var wire 1 `' A $end
$var wire 1 b' B $end
$var wire 1 w' control $end
$var wire 1 x' not_control $end
$var wire 1 a' out $end
$var wire 1 y' wA $end
$var wire 1 z' wB $end
$upscope $end
$upscope $end
$scope module alu27 $end
$var wire 1 {' A $end
$var wire 1 |' B $end
$var wire 1 }' carryin $end
$var wire 3 ~' control [2:0] $end
$var wire 1 !( w_B $end
$var wire 1 "( sum $end
$var wire 1 #( out $end
$var wire 1 $( lout $end
$var wire 1 %( carryout $end
$scope module fa $end
$var wire 1 {' a $end
$var wire 1 !( b $end
$var wire 1 }' cin $end
$var wire 1 %( cout $end
$var wire 1 &( partial_c1 $end
$var wire 1 '( partial_c2 $end
$var wire 1 (( partial_s $end
$var wire 1 "( sum $end
$upscope $end
$scope module lu $end
$var wire 1 {' A $end
$var wire 1 |' B $end
$var wire 1 )( NOR $end
$var wire 1 *( OR $end
$var wire 1 +( XOR $end
$var wire 2 ,( control [1:0] $end
$var wire 1 -( not_A $end
$var wire 1 .( not_B $end
$var wire 1 $( out $end
$var wire 1 /( w0 $end
$var wire 1 0( w1 $end
$var wire 1 1( w2 $end
$var wire 1 2( w3 $end
$var wire 1 3( w4 $end
$var wire 1 4( w5 $end
$var wire 1 5( wA $end
$var wire 1 6( wN $end
$var wire 1 7( wO $end
$var wire 1 8( wX $end
$upscope $end
$scope module m2 $end
$var wire 1 "( A $end
$var wire 1 $( B $end
$var wire 1 9( control $end
$var wire 1 :( not_control $end
$var wire 1 #( out $end
$var wire 1 ;( wA $end
$var wire 1 <( wB $end
$upscope $end
$upscope $end
$scope module alu28 $end
$var wire 1 =( A $end
$var wire 1 >( B $end
$var wire 1 ?( carryin $end
$var wire 3 @( control [2:0] $end
$var wire 1 A( w_B $end
$var wire 1 B( sum $end
$var wire 1 C( out $end
$var wire 1 D( lout $end
$var wire 1 E( carryout $end
$scope module fa $end
$var wire 1 =( a $end
$var wire 1 A( b $end
$var wire 1 ?( cin $end
$var wire 1 E( cout $end
$var wire 1 F( partial_c1 $end
$var wire 1 G( partial_c2 $end
$var wire 1 H( partial_s $end
$var wire 1 B( sum $end
$upscope $end
$scope module lu $end
$var wire 1 =( A $end
$var wire 1 >( B $end
$var wire 1 I( NOR $end
$var wire 1 J( OR $end
$var wire 1 K( XOR $end
$var wire 2 L( control [1:0] $end
$var wire 1 M( not_A $end
$var wire 1 N( not_B $end
$var wire 1 D( out $end
$var wire 1 O( w0 $end
$var wire 1 P( w1 $end
$var wire 1 Q( w2 $end
$var wire 1 R( w3 $end
$var wire 1 S( w4 $end
$var wire 1 T( w5 $end
$var wire 1 U( wA $end
$var wire 1 V( wN $end
$var wire 1 W( wO $end
$var wire 1 X( wX $end
$upscope $end
$scope module m2 $end
$var wire 1 B( A $end
$var wire 1 D( B $end
$var wire 1 Y( control $end
$var wire 1 Z( not_control $end
$var wire 1 C( out $end
$var wire 1 [( wA $end
$var wire 1 \( wB $end
$upscope $end
$upscope $end
$scope module alu29 $end
$var wire 1 ]( A $end
$var wire 1 ^( B $end
$var wire 1 _( carryin $end
$var wire 3 `( control [2:0] $end
$var wire 1 a( w_B $end
$var wire 1 b( sum $end
$var wire 1 c( out $end
$var wire 1 d( lout $end
$var wire 1 e( carryout $end
$scope module fa $end
$var wire 1 ]( a $end
$var wire 1 a( b $end
$var wire 1 _( cin $end
$var wire 1 e( cout $end
$var wire 1 f( partial_c1 $end
$var wire 1 g( partial_c2 $end
$var wire 1 h( partial_s $end
$var wire 1 b( sum $end
$upscope $end
$scope module lu $end
$var wire 1 ]( A $end
$var wire 1 ^( B $end
$var wire 1 i( NOR $end
$var wire 1 j( OR $end
$var wire 1 k( XOR $end
$var wire 2 l( control [1:0] $end
$var wire 1 m( not_A $end
$var wire 1 n( not_B $end
$var wire 1 d( out $end
$var wire 1 o( w0 $end
$var wire 1 p( w1 $end
$var wire 1 q( w2 $end
$var wire 1 r( w3 $end
$var wire 1 s( w4 $end
$var wire 1 t( w5 $end
$var wire 1 u( wA $end
$var wire 1 v( wN $end
$var wire 1 w( wO $end
$var wire 1 x( wX $end
$upscope $end
$scope module m2 $end
$var wire 1 b( A $end
$var wire 1 d( B $end
$var wire 1 y( control $end
$var wire 1 z( not_control $end
$var wire 1 c( out $end
$var wire 1 {( wA $end
$var wire 1 |( wB $end
$upscope $end
$upscope $end
$scope module alu3 $end
$var wire 1 }( A $end
$var wire 1 ~( B $end
$var wire 1 !) carryin $end
$var wire 3 ") control [2:0] $end
$var wire 1 #) w_B $end
$var wire 1 $) sum $end
$var wire 1 %) out $end
$var wire 1 &) lout $end
$var wire 1 ') carryout $end
$scope module fa $end
$var wire 1 }( a $end
$var wire 1 #) b $end
$var wire 1 !) cin $end
$var wire 1 ') cout $end
$var wire 1 () partial_c1 $end
$var wire 1 )) partial_c2 $end
$var wire 1 *) partial_s $end
$var wire 1 $) sum $end
$upscope $end
$scope module lu $end
$var wire 1 }( A $end
$var wire 1 ~( B $end
$var wire 1 +) NOR $end
$var wire 1 ,) OR $end
$var wire 1 -) XOR $end
$var wire 2 .) control [1:0] $end
$var wire 1 /) not_A $end
$var wire 1 0) not_B $end
$var wire 1 &) out $end
$var wire 1 1) w0 $end
$var wire 1 2) w1 $end
$var wire 1 3) w2 $end
$var wire 1 4) w3 $end
$var wire 1 5) w4 $end
$var wire 1 6) w5 $end
$var wire 1 7) wA $end
$var wire 1 8) wN $end
$var wire 1 9) wO $end
$var wire 1 :) wX $end
$upscope $end
$scope module m2 $end
$var wire 1 $) A $end
$var wire 1 &) B $end
$var wire 1 ;) control $end
$var wire 1 <) not_control $end
$var wire 1 %) out $end
$var wire 1 =) wA $end
$var wire 1 >) wB $end
$upscope $end
$upscope $end
$scope module alu30 $end
$var wire 1 ?) A $end
$var wire 1 @) B $end
$var wire 1 A) carryin $end
$var wire 3 B) control [2:0] $end
$var wire 1 C) w_B $end
$var wire 1 D) sum $end
$var wire 1 E) out $end
$var wire 1 F) lout $end
$var wire 1 G) carryout $end
$scope module fa $end
$var wire 1 ?) a $end
$var wire 1 C) b $end
$var wire 1 A) cin $end
$var wire 1 G) cout $end
$var wire 1 H) partial_c1 $end
$var wire 1 I) partial_c2 $end
$var wire 1 J) partial_s $end
$var wire 1 D) sum $end
$upscope $end
$scope module lu $end
$var wire 1 ?) A $end
$var wire 1 @) B $end
$var wire 1 K) NOR $end
$var wire 1 L) OR $end
$var wire 1 M) XOR $end
$var wire 2 N) control [1:0] $end
$var wire 1 O) not_A $end
$var wire 1 P) not_B $end
$var wire 1 F) out $end
$var wire 1 Q) w0 $end
$var wire 1 R) w1 $end
$var wire 1 S) w2 $end
$var wire 1 T) w3 $end
$var wire 1 U) w4 $end
$var wire 1 V) w5 $end
$var wire 1 W) wA $end
$var wire 1 X) wN $end
$var wire 1 Y) wO $end
$var wire 1 Z) wX $end
$upscope $end
$scope module m2 $end
$var wire 1 D) A $end
$var wire 1 F) B $end
$var wire 1 [) control $end
$var wire 1 \) not_control $end
$var wire 1 E) out $end
$var wire 1 ]) wA $end
$var wire 1 ^) wB $end
$upscope $end
$upscope $end
$scope module alu31 $end
$var wire 1 _) A $end
$var wire 1 `) B $end
$var wire 1 a) carryin $end
$var wire 3 b) control [2:0] $end
$var wire 1 c) w_B $end
$var wire 1 d) sum $end
$var wire 1 e) out $end
$var wire 1 f) lout $end
$var wire 1 g) carryout $end
$scope module fa $end
$var wire 1 _) a $end
$var wire 1 c) b $end
$var wire 1 a) cin $end
$var wire 1 g) cout $end
$var wire 1 h) partial_c1 $end
$var wire 1 i) partial_c2 $end
$var wire 1 j) partial_s $end
$var wire 1 d) sum $end
$upscope $end
$scope module lu $end
$var wire 1 _) A $end
$var wire 1 `) B $end
$var wire 1 k) NOR $end
$var wire 1 l) OR $end
$var wire 1 m) XOR $end
$var wire 2 n) control [1:0] $end
$var wire 1 o) not_A $end
$var wire 1 p) not_B $end
$var wire 1 f) out $end
$var wire 1 q) w0 $end
$var wire 1 r) w1 $end
$var wire 1 s) w2 $end
$var wire 1 t) w3 $end
$var wire 1 u) w4 $end
$var wire 1 v) w5 $end
$var wire 1 w) wA $end
$var wire 1 x) wN $end
$var wire 1 y) wO $end
$var wire 1 z) wX $end
$upscope $end
$scope module m2 $end
$var wire 1 d) A $end
$var wire 1 f) B $end
$var wire 1 {) control $end
$var wire 1 |) not_control $end
$var wire 1 e) out $end
$var wire 1 }) wA $end
$var wire 1 ~) wB $end
$upscope $end
$upscope $end
$scope module alu4 $end
$var wire 1 !* A $end
$var wire 1 "* B $end
$var wire 1 #* carryin $end
$var wire 3 $* control [2:0] $end
$var wire 1 %* w_B $end
$var wire 1 &* sum $end
$var wire 1 '* out $end
$var wire 1 (* lout $end
$var wire 1 )* carryout $end
$scope module fa $end
$var wire 1 !* a $end
$var wire 1 %* b $end
$var wire 1 #* cin $end
$var wire 1 )* cout $end
$var wire 1 ** partial_c1 $end
$var wire 1 +* partial_c2 $end
$var wire 1 ,* partial_s $end
$var wire 1 &* sum $end
$upscope $end
$scope module lu $end
$var wire 1 !* A $end
$var wire 1 "* B $end
$var wire 1 -* NOR $end
$var wire 1 .* OR $end
$var wire 1 /* XOR $end
$var wire 2 0* control [1:0] $end
$var wire 1 1* not_A $end
$var wire 1 2* not_B $end
$var wire 1 (* out $end
$var wire 1 3* w0 $end
$var wire 1 4* w1 $end
$var wire 1 5* w2 $end
$var wire 1 6* w3 $end
$var wire 1 7* w4 $end
$var wire 1 8* w5 $end
$var wire 1 9* wA $end
$var wire 1 :* wN $end
$var wire 1 ;* wO $end
$var wire 1 <* wX $end
$upscope $end
$scope module m2 $end
$var wire 1 &* A $end
$var wire 1 (* B $end
$var wire 1 =* control $end
$var wire 1 >* not_control $end
$var wire 1 '* out $end
$var wire 1 ?* wA $end
$var wire 1 @* wB $end
$upscope $end
$upscope $end
$scope module alu5 $end
$var wire 1 A* A $end
$var wire 1 B* B $end
$var wire 1 C* carryin $end
$var wire 3 D* control [2:0] $end
$var wire 1 E* w_B $end
$var wire 1 F* sum $end
$var wire 1 G* out $end
$var wire 1 H* lout $end
$var wire 1 I* carryout $end
$scope module fa $end
$var wire 1 A* a $end
$var wire 1 E* b $end
$var wire 1 C* cin $end
$var wire 1 I* cout $end
$var wire 1 J* partial_c1 $end
$var wire 1 K* partial_c2 $end
$var wire 1 L* partial_s $end
$var wire 1 F* sum $end
$upscope $end
$scope module lu $end
$var wire 1 A* A $end
$var wire 1 B* B $end
$var wire 1 M* NOR $end
$var wire 1 N* OR $end
$var wire 1 O* XOR $end
$var wire 2 P* control [1:0] $end
$var wire 1 Q* not_A $end
$var wire 1 R* not_B $end
$var wire 1 H* out $end
$var wire 1 S* w0 $end
$var wire 1 T* w1 $end
$var wire 1 U* w2 $end
$var wire 1 V* w3 $end
$var wire 1 W* w4 $end
$var wire 1 X* w5 $end
$var wire 1 Y* wA $end
$var wire 1 Z* wN $end
$var wire 1 [* wO $end
$var wire 1 \* wX $end
$upscope $end
$scope module m2 $end
$var wire 1 F* A $end
$var wire 1 H* B $end
$var wire 1 ]* control $end
$var wire 1 ^* not_control $end
$var wire 1 G* out $end
$var wire 1 _* wA $end
$var wire 1 `* wB $end
$upscope $end
$upscope $end
$scope module alu6 $end
$var wire 1 a* A $end
$var wire 1 b* B $end
$var wire 1 c* carryin $end
$var wire 3 d* control [2:0] $end
$var wire 1 e* w_B $end
$var wire 1 f* sum $end
$var wire 1 g* out $end
$var wire 1 h* lout $end
$var wire 1 i* carryout $end
$scope module fa $end
$var wire 1 a* a $end
$var wire 1 e* b $end
$var wire 1 c* cin $end
$var wire 1 i* cout $end
$var wire 1 j* partial_c1 $end
$var wire 1 k* partial_c2 $end
$var wire 1 l* partial_s $end
$var wire 1 f* sum $end
$upscope $end
$scope module lu $end
$var wire 1 a* A $end
$var wire 1 b* B $end
$var wire 1 m* NOR $end
$var wire 1 n* OR $end
$var wire 1 o* XOR $end
$var wire 2 p* control [1:0] $end
$var wire 1 q* not_A $end
$var wire 1 r* not_B $end
$var wire 1 h* out $end
$var wire 1 s* w0 $end
$var wire 1 t* w1 $end
$var wire 1 u* w2 $end
$var wire 1 v* w3 $end
$var wire 1 w* w4 $end
$var wire 1 x* w5 $end
$var wire 1 y* wA $end
$var wire 1 z* wN $end
$var wire 1 {* wO $end
$var wire 1 |* wX $end
$upscope $end
$scope module m2 $end
$var wire 1 f* A $end
$var wire 1 h* B $end
$var wire 1 }* control $end
$var wire 1 ~* not_control $end
$var wire 1 g* out $end
$var wire 1 !+ wA $end
$var wire 1 "+ wB $end
$upscope $end
$upscope $end
$scope module alu7 $end
$var wire 1 #+ A $end
$var wire 1 $+ B $end
$var wire 1 %+ carryin $end
$var wire 3 &+ control [2:0] $end
$var wire 1 '+ w_B $end
$var wire 1 (+ sum $end
$var wire 1 )+ out $end
$var wire 1 *+ lout $end
$var wire 1 ++ carryout $end
$scope module fa $end
$var wire 1 #+ a $end
$var wire 1 '+ b $end
$var wire 1 %+ cin $end
$var wire 1 ++ cout $end
$var wire 1 ,+ partial_c1 $end
$var wire 1 -+ partial_c2 $end
$var wire 1 .+ partial_s $end
$var wire 1 (+ sum $end
$upscope $end
$scope module lu $end
$var wire 1 #+ A $end
$var wire 1 $+ B $end
$var wire 1 /+ NOR $end
$var wire 1 0+ OR $end
$var wire 1 1+ XOR $end
$var wire 2 2+ control [1:0] $end
$var wire 1 3+ not_A $end
$var wire 1 4+ not_B $end
$var wire 1 *+ out $end
$var wire 1 5+ w0 $end
$var wire 1 6+ w1 $end
$var wire 1 7+ w2 $end
$var wire 1 8+ w3 $end
$var wire 1 9+ w4 $end
$var wire 1 :+ w5 $end
$var wire 1 ;+ wA $end
$var wire 1 <+ wN $end
$var wire 1 =+ wO $end
$var wire 1 >+ wX $end
$upscope $end
$scope module m2 $end
$var wire 1 (+ A $end
$var wire 1 *+ B $end
$var wire 1 ?+ control $end
$var wire 1 @+ not_control $end
$var wire 1 )+ out $end
$var wire 1 A+ wA $end
$var wire 1 B+ wB $end
$upscope $end
$upscope $end
$scope module alu8 $end
$var wire 1 C+ A $end
$var wire 1 D+ B $end
$var wire 1 E+ carryin $end
$var wire 3 F+ control [2:0] $end
$var wire 1 G+ w_B $end
$var wire 1 H+ sum $end
$var wire 1 I+ out $end
$var wire 1 J+ lout $end
$var wire 1 K+ carryout $end
$scope module fa $end
$var wire 1 C+ a $end
$var wire 1 G+ b $end
$var wire 1 E+ cin $end
$var wire 1 K+ cout $end
$var wire 1 L+ partial_c1 $end
$var wire 1 M+ partial_c2 $end
$var wire 1 N+ partial_s $end
$var wire 1 H+ sum $end
$upscope $end
$scope module lu $end
$var wire 1 C+ A $end
$var wire 1 D+ B $end
$var wire 1 O+ NOR $end
$var wire 1 P+ OR $end
$var wire 1 Q+ XOR $end
$var wire 2 R+ control [1:0] $end
$var wire 1 S+ not_A $end
$var wire 1 T+ not_B $end
$var wire 1 J+ out $end
$var wire 1 U+ w0 $end
$var wire 1 V+ w1 $end
$var wire 1 W+ w2 $end
$var wire 1 X+ w3 $end
$var wire 1 Y+ w4 $end
$var wire 1 Z+ w5 $end
$var wire 1 [+ wA $end
$var wire 1 \+ wN $end
$var wire 1 ]+ wO $end
$var wire 1 ^+ wX $end
$upscope $end
$scope module m2 $end
$var wire 1 H+ A $end
$var wire 1 J+ B $end
$var wire 1 _+ control $end
$var wire 1 `+ not_control $end
$var wire 1 I+ out $end
$var wire 1 a+ wA $end
$var wire 1 b+ wB $end
$upscope $end
$upscope $end
$scope module alu9 $end
$var wire 1 c+ A $end
$var wire 1 d+ B $end
$var wire 1 e+ carryin $end
$var wire 3 f+ control [2:0] $end
$var wire 1 g+ w_B $end
$var wire 1 h+ sum $end
$var wire 1 i+ out $end
$var wire 1 j+ lout $end
$var wire 1 k+ carryout $end
$scope module fa $end
$var wire 1 c+ a $end
$var wire 1 g+ b $end
$var wire 1 e+ cin $end
$var wire 1 k+ cout $end
$var wire 1 l+ partial_c1 $end
$var wire 1 m+ partial_c2 $end
$var wire 1 n+ partial_s $end
$var wire 1 h+ sum $end
$upscope $end
$scope module lu $end
$var wire 1 c+ A $end
$var wire 1 d+ B $end
$var wire 1 o+ NOR $end
$var wire 1 p+ OR $end
$var wire 1 q+ XOR $end
$var wire 2 r+ control [1:0] $end
$var wire 1 s+ not_A $end
$var wire 1 t+ not_B $end
$var wire 1 j+ out $end
$var wire 1 u+ w0 $end
$var wire 1 v+ w1 $end
$var wire 1 w+ w2 $end
$var wire 1 x+ w3 $end
$var wire 1 y+ w4 $end
$var wire 1 z+ w5 $end
$var wire 1 {+ wA $end
$var wire 1 |+ wN $end
$var wire 1 }+ wO $end
$var wire 1 ~+ wX $end
$upscope $end
$scope module m2 $end
$var wire 1 h+ A $end
$var wire 1 j+ B $end
$var wire 1 !, control $end
$var wire 1 ", not_control $end
$var wire 1 i+ out $end
$var wire 1 #, wA $end
$var wire 1 $, wB $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0$,
0#,
1",
0!,
0~+
0}+
1|+
0{+
0z+
0y+
0x+
0w+
0v+
1u+
1t+
1s+
b10 r+
0q+
0p+
1o+
0n+
0m+
0l+
0k+
1j+
0i+
0h+
0g+
b10 f+
0e+
0d+
0c+
0b+
0a+
1`+
0_+
0^+
0]+
1\+
0[+
0Z+
0Y+
0X+
0W+
0V+
1U+
1T+
1S+
b10 R+
0Q+
0P+
1O+
0N+
0M+
0L+
0K+
1J+
0I+
0H+
0G+
b10 F+
0E+
0D+
0C+
0B+
0A+
1@+
0?+
0>+
0=+
1<+
0;+
0:+
09+
08+
07+
06+
15+
14+
13+
b10 2+
01+
00+
1/+
0.+
0-+
0,+
0++
1*+
0)+
0(+
0'+
b10 &+
0%+
0$+
0#+
0"+
0!+
1~*
0}*
0|*
0{*
1z*
0y*
0x*
0w*
0v*
0u*
0t*
1s*
1r*
1q*
b10 p*
0o*
0n*
1m*
0l*
0k*
0j*
0i*
1h*
0g*
0f*
0e*
b10 d*
0c*
0b*
0a*
0`*
0_*
1^*
0]*
0\*
0[*
1Z*
0Y*
0X*
0W*
0V*
0U*
0T*
1S*
1R*
1Q*
b10 P*
0O*
0N*
1M*
0L*
0K*
0J*
0I*
1H*
0G*
0F*
0E*
b10 D*
0C*
0B*
0A*
0@*
0?*
1>*
0=*
0<*
0;*
1:*
09*
08*
07*
06*
05*
04*
13*
12*
11*
b10 0*
0/*
0.*
1-*
0,*
0+*
0**
0)*
1(*
0'*
0&*
0%*
b10 $*
0#*
0"*
0!*
0~)
0})
1|)
0{)
0z)
0y)
1x)
0w)
0v)
0u)
0t)
0s)
0r)
1q)
1p)
1o)
b10 n)
0m)
0l)
1k)
0j)
0i)
0h)
0g)
1f)
0e)
0d)
0c)
b10 b)
0a)
0`)
0_)
0^)
0])
1\)
0[)
0Z)
0Y)
1X)
0W)
0V)
0U)
0T)
0S)
0R)
1Q)
1P)
1O)
b10 N)
0M)
0L)
1K)
0J)
0I)
0H)
0G)
1F)
0E)
0D)
0C)
b10 B)
0A)
0@)
0?)
0>)
1=)
1<)
0;)
0:)
09)
08)
07)
16)
05)
14)
13)
02)
11)
10)
0/)
b10 .)
0-)
0,)
1+)
1*)
0))
0()
0')
0&)
1%)
1$)
0#)
b10 ")
0!)
0~(
1}(
0|(
0{(
1z(
0y(
0x(
0w(
1v(
0u(
0t(
0s(
0r(
0q(
0p(
1o(
1n(
1m(
b10 l(
0k(
0j(
1i(
0h(
0g(
0f(
0e(
1d(
0c(
0b(
0a(
b10 `(
0_(
0^(
0](
0\(
0[(
1Z(
0Y(
0X(
0W(
1V(
0U(
0T(
0S(
0R(
0Q(
0P(
1O(
1N(
1M(
b10 L(
0K(
0J(
1I(
0H(
0G(
0F(
0E(
1D(
0C(
0B(
0A(
b10 @(
0?(
0>(
0=(
0<(
0;(
1:(
09(
08(
07(
16(
05(
04(
03(
02(
01(
00(
1/(
1.(
1-(
b10 ,(
0+(
0*(
1)(
0((
0'(
0&(
0%(
1$(
0#(
0"(
0!(
b10 ~'
0}'
0|'
0{'
0z'
0y'
1x'
0w'
0v'
0u'
1t'
0s'
0r'
0q'
0p'
0o'
0n'
1m'
1l'
1k'
b10 j'
0i'
0h'
1g'
0f'
0e'
0d'
0c'
1b'
0a'
0`'
0_'
b10 ^'
0]'
0\'
0['
0Z'
0Y'
1X'
0W'
0V'
0U'
1T'
0S'
0R'
0Q'
0P'
0O'
0N'
1M'
1L'
1K'
b10 J'
0I'
0H'
1G'
0F'
0E'
0D'
0C'
1B'
0A'
0@'
0?'
b10 >'
0='
0<'
0;'
0:'
09'
18'
07'
06'
05'
14'
03'
02'
01'
00'
0/'
0.'
1-'
1,'
1+'
b10 *'
0)'
0('
1''
0&'
0%'
0$'
0#'
1"'
0!'
0~&
0}&
b10 |&
0{&
0z&
0y&
0x&
0w&
1v&
0u&
0t&
0s&
1r&
0q&
0p&
0o&
0n&
0m&
0l&
1k&
1j&
1i&
b10 h&
0g&
0f&
1e&
0d&
0c&
0b&
0a&
1`&
0_&
0^&
0]&
b10 \&
0[&
0Z&
0Y&
0X&
0W&
1V&
0U&
0T&
0S&
1R&
0Q&
0P&
0O&
0N&
0M&
0L&
1K&
1J&
1I&
b10 H&
0G&
0F&
1E&
0D&
0C&
0B&
0A&
1@&
0?&
0>&
0=&
b10 <&
0;&
0:&
09&
08&
07&
16&
05&
04&
03&
12&
01&
00&
0/&
0.&
0-&
0,&
1+&
1*&
1)&
b10 (&
0'&
0&&
1%&
0$&
0#&
0"&
0!&
1~%
0}%
0|%
0{%
b10 z%
0y%
0x%
0w%
0v%
0u%
1t%
0s%
0r%
0q%
1p%
0o%
0n%
0m%
0l%
0k%
0j%
1i%
1h%
1g%
b10 f%
0e%
0d%
1c%
0b%
0a%
0`%
0_%
1^%
0]%
0\%
0[%
b10 Z%
0Y%
0X%
0W%
0V%
1U%
1T%
0S%
0R%
0Q%
0P%
0O%
1N%
1M%
0L%
1K%
0J%
1I%
0H%
1G%
b10 F%
0E%
0D%
1C%
1B%
0A%
0@%
0?%
0>%
1=%
1<%
1;%
b10 :%
09%
18%
07%
06%
05%
14%
03%
02%
01%
10%
0/%
0.%
0-%
0,%
0+%
0*%
1)%
1(%
1'%
b10 &%
0%%
0$%
1#%
0"%
0!%
0~$
0}$
1|$
0{$
0z$
0y$
b10 x$
0w$
0v$
0u$
0t$
0s$
1r$
0q$
0p$
0o$
1n$
0m$
0l$
0k$
0j$
0i$
0h$
1g$
1f$
1e$
b10 d$
0c$
0b$
1a$
0`$
0_$
0^$
0]$
1\$
0[$
0Z$
0Y$
b10 X$
0W$
0V$
0U$
0T$
0S$
1R$
0Q$
0P$
0O$
1N$
0M$
0L$
0K$
0J$
0I$
0H$
1G$
1F$
1E$
b10 D$
0C$
0B$
1A$
0@$
0?$
0>$
0=$
1<$
0;$
0:$
09$
b10 8$
07$
06$
05$
04$
03$
12$
01$
00$
0/$
1.$
0-$
0,$
0+$
0*$
0)$
0($
1'$
1&$
1%$
b10 $$
0#$
0"$
1!$
0~#
0}#
0|#
0{#
1z#
0y#
0x#
0w#
b10 v#
0u#
0t#
0s#
0r#
0q#
1p#
0o#
0n#
0m#
1l#
0k#
0j#
0i#
0h#
0g#
0f#
1e#
1d#
1c#
b10 b#
0a#
0`#
1_#
0^#
0]#
0\#
0[#
1Z#
0Y#
0X#
0W#
b10 V#
0U#
0T#
0S#
0R#
0Q#
1P#
0O#
0N#
0M#
1L#
0K#
0J#
0I#
0H#
0G#
0F#
1E#
1D#
1C#
b10 B#
0A#
0@#
1?#
0>#
0=#
0<#
0;#
1:#
09#
08#
07#
b10 6#
05#
04#
03#
02#
01#
10#
0/#
0.#
0-#
1,#
0+#
0*#
0)#
0(#
0'#
0&#
1%#
1$#
1##
b10 "#
0!#
0~"
1}"
0|"
0{"
0z"
0y"
1x"
0w"
0v"
0u"
b10 t"
0s"
0r"
0q"
0p"
0o"
1n"
0m"
0l"
0k"
1j"
0i"
0h"
0g"
0f"
0e"
0d"
1c"
1b"
1a"
b10 `"
0_"
0^"
1]"
0\"
0["
0Z"
0Y"
1X"
0W"
0V"
0U"
b10 T"
0S"
0R"
0Q"
0P"
0O"
1N"
0M"
0L"
0K"
1J"
0I"
0H"
0G"
0F"
0E"
0D"
1C"
1B"
1A"
b10 @"
0?"
0>"
1="
0<"
0;"
0:"
09"
18"
07"
06"
05"
b10 4"
03"
02"
01"
00"
0/"
1."
0-"
0,"
0+"
1*"
0)"
0("
0'"
0&"
0%"
0$"
1#"
1""
1!"
b10 ~
0}
0|
1{
0z
0y
0x
0w
1v
0u
0t
0s
b10 r
0q
0p
0o
0n
1m
1l
0k
0j
0i
0h
0g
1f
1e
0d
1c
0b
1a
0`
1_
b10 ^
0]
0\
1[
1Z
0Y
0X
0W
0V
1U
1T
1S
b10 R
0Q
1P
0O
0N
0M
1L
0K
0J
0I
1H
0G
0F
0E
0D
0C
0B
1A
1@
1?
b10 >
0=
0<
1;
0:
09
08
07
16
05
04
03
b10 2
01
00
0/
bxz .
b0 -
b1110 ,
bz +
b10 *
b100 )
b1000 (
b10 '
b100 &
b1000 %
b1110 $
x#
x"
z!
$end
#10
0=%
0U%
0<%
1u
0v
17"
08"
1W"
0X"
1w"
0x"
19#
0:#
1Y#
0Z#
1y#
0z#
1;$
0<$
1[$
0\$
1{$
0|$
1]%
0^%
1}%
0~%
1?&
0@&
1_&
0`&
1!'
0"'
1A'
0B'
1a'
0b'
1#(
0$(
1C(
0D(
1c(
0d(
1E)
0F)
1e)
0f)
1'*
0(*
1G*
0H*
1g*
0h*
1)+
0*+
1I+
0J+
1i+
0j+
1/"
0*"
1O"
0J"
1o"
0j"
11#
0,#
1Q#
0L#
1q#
0l#
13$
0.$
1S$
0N$
1s$
0n$
15%
00%
1>%
1u%
0p%
17&
02&
1W&
0R&
1w&
0r&
19'
04'
1Y'
0T'
1y'
0t'
1;(
06(
1[(
0V(
1{(
0v(
1])
0X)
1})
0x)
1?*
0:*
1_*
0Z*
1!+
0z*
1A+
0<+
1a+
0\+
1#,
0|+
1U
1%)
b11111111111111111111111111111011 $
b11111111111111111111111111111011 ,
15
0;
0[
1t
0{
16"
0="
1V"
0]"
1v"
0}"
18#
0?#
1X#
0_#
1x#
0!$
1:$
0A$
1Z$
0a$
1z$
0#%
0C%
1R%
1\%
0c%
1|%
0%&
1>&
0E&
1^&
0e&
1~&
0''
1@'
0G'
1`'
0g'
1"(
0)(
1B(
0I(
1b(
0i(
0+)
1D)
0K)
1d)
0k)
1&*
0-*
1F*
0M*
1f*
0m*
1(+
0/+
1H+
0O+
1h+
0o+
1J
1m
09%
0c
1=)
0&)
1M
0A
1=
0a
1]
1z
0#"
1}
1<"
0C"
1?"
1\"
0c"
1_"
1|"
0%#
1!#
1>#
0E#
1A#
1^#
0e#
1a#
1~#
0'$
1#$
1@$
0G$
1C$
1`$
0g$
1c$
1"%
0)%
1%%
0B%
0I%
1E%
1b%
0i%
1e%
1$&
0+&
1'&
1D&
0K&
1G&
1d&
0k&
1g&
1&'
0-'
1)'
1F'
0M'
1I'
1f'
0m'
1i'
1((
0/(
1+(
1H(
0O(
1K(
1h(
0o(
1k(
01)
1-)
1J)
0Q)
1M)
1j)
0q)
1m)
1,*
03*
1/*
1L*
0S*
1O*
1l*
0s*
1o*
1.+
05+
11+
1N+
0U+
1Q+
1n+
0u+
1q+
0H
1C
1T
b0 -
0W
0e
1$)
08)
03)
14
0S
1s
15"
1U"
1u"
17#
1W#
1w#
19$
1Y$
1y$
0;%
1[%
1{%
1=&
1]&
1}&
1?'
1_'
1!(
1A(
1a(
1#)
1C)
1c)
1%*
1E*
1e*
1'+
1G+
1g+
0@
1F
1E
1Z
0X
0_
1*)
1/)
06)
04)
11
b11 >
b11 ^
b11 ~
b11 @"
b11 `"
b11 "#
b11 B#
b11 b#
b11 $$
b11 D$
b11 d$
b11 &%
b11 F%
b11 f%
b11 (&
b11 H&
b11 h&
b11 *'
b11 J'
b11 j'
b11 ,(
b11 L(
b11 l(
b11 .)
b11 N)
b11 n)
b11 0*
b11 P*
b11 p*
b11 2+
b11 R+
b11 r+
10
1O
0}(
b11 '
b11 *
b11 2
b11 R
b11 r
b11 4"
b11 T"
b11 t"
b11 6#
b11 V#
b11 v#
b11 8$
b11 X$
b11 x$
b11 :%
b11 Z%
b11 z%
b11 <&
b11 \&
b11 |&
b11 >'
b11 ^'
b11 ~'
b11 @(
b11 `(
b11 ")
b11 B)
b11 b)
b11 $*
b11 D*
b11 d*
b11 &+
b11 F+
b11 f+
b101 &
b101 )
b10 %
b10 (
#20
