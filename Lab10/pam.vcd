$date
	Mon Oct 28 16:44:39 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 32 ! out [31:0] $end
$var reg 1 " clk $end
$var reg 1 # done $end
$var reg 1 $ reset $end
$scope module pam $end
$var wire 1 " clk $end
$var wire 1 $ reset $end
$var wire 32 % out [31:0] $end
$var wire 30 & next_index [31:2] $end
$var wire 32 ' next_data [31:0] $end
$var wire 30 ( index [31:2] $end
$var wire 32 ) data_2 [31:0] $end
$var wire 32 * data [31:0] $end
$scope module Adder $end
$var wire 30 + in2 [29:0] $end
$var wire 30 , out [29:0] $end
$var wire 30 - in1 [29:0] $end
$upscope $end
$scope module Counter $end
$var wire 1 " clk $end
$var wire 30 . d [29:0] $end
$var wire 1 / enable $end
$var wire 1 $ reset $end
$var reg 30 0 q [29:0] $end
$upscope $end
$scope module Register $end
$var wire 1 " clk $end
$var wire 1 1 enable $end
$var wire 1 $ reset $end
$var wire 32 2 d [31:0] $end
$var reg 32 3 q [31:0] $end
$upscope $end
$scope module alu $end
$var wire 3 4 control [2:0] $end
$var wire 32 5 inA [31:0] $end
$var wire 32 6 out [31:0] $end
$var wire 1 7 zero $end
$var wire 32 8 inB [31:0] $end
$upscope $end
$scope module dataRegister $end
$var wire 1 " clk $end
$var wire 1 9 enable $end
$var wire 1 $ reset $end
$var wire 32 : d [31:0] $end
$var reg 32 ; q [31:0] $end
$upscope $end
$scope module rom $end
$var wire 30 < addr [29:0] $end
$var wire 32 = data [31:0] $end
$var reg 32 > i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000000 >
bx =
bx <
bx ;
bx :
19
bx 8
x7
bx 6
bx 5
b0 4
bx 3
bx 2
11
bx 0
1/
bx .
bx -
bx ,
b1 +
bx *
bx )
bx (
bx '
bx &
bx %
1$
0#
0"
bx !
$end
#2
b0 (
b0 -
b0 0
b0 <
b0 )
b0 8
b0 ;
b0 !
b0 %
b0 3
b0 5
1"
#3
17
#4
b0 '
b0 2
b0 6
b1 *
b1 :
b1 =
b1 &
b1 ,
b1 .
0"
#6
1"
#8
0"
#10
1"
#12
0"
#13
0$
#14
b1 )
b1 8
b1 ;
b1 (
b1 -
b1 0
b1 <
1"
#15
07
#16
b1 '
b1 2
b1 6
b10 *
b10 :
b10 =
b10 &
b10 ,
b10 .
0"
#18
b10 (
b10 -
b10 0
b10 <
b10 )
b10 8
b10 ;
b1 !
b1 %
b1 3
b1 5
1"
#20
b11 '
b11 2
b11 6
b100 *
b100 :
b100 =
b11 &
b11 ,
b11 .
0"
#22
b11 !
b11 %
b11 3
b11 5
b100 )
b100 8
b100 ;
b11 (
b11 -
b11 0
b11 <
1"
#24
b111 '
b111 2
b111 6
b1000 *
b1000 :
b1000 =
b100 &
b100 ,
b100 .
0"
#26
b100 (
b100 -
b100 0
b100 <
b1000 )
b1000 8
b1000 ;
b111 !
b111 %
b111 3
b111 5
1"
#28
b1111 '
b1111 2
b1111 6
b10000 *
b10000 :
b10000 =
b101 &
b101 ,
b101 .
0"
#30
b1111 !
b1111 %
b1111 3
b1111 5
b10000 )
b10000 8
b10000 ;
b101 (
b101 -
b101 0
b101 <
1"
#32
b11111 '
b11111 2
b11111 6
b100000 *
b100000 :
b100000 =
b110 &
b110 ,
b110 .
0"
#34
b110 (
b110 -
b110 0
b110 <
b100000 )
b100000 8
b100000 ;
b11111 !
b11111 %
b11111 3
b11111 5
1"
#36
b111111 '
b111111 2
b111111 6
b1000000 *
b1000000 :
b1000000 =
b111 &
b111 ,
b111 .
0"
#38
b111111 !
b111111 %
b111111 3
b111111 5
b1000000 )
b1000000 8
b1000000 ;
b111 (
b111 -
b111 0
b111 <
1"
#40
b1111111 '
b1111111 2
b1111111 6
b10000000 *
b10000000 :
b10000000 =
b1000 &
b1000 ,
b1000 .
0"
#42
b1000 (
b1000 -
b1000 0
b1000 <
b10000000 )
b10000000 8
b10000000 ;
b1111111 !
b1111111 %
b1111111 3
b1111111 5
1"
#44
b11111111 '
b11111111 2
b11111111 6
b0 *
b0 :
b0 =
b1001 &
b1001 ,
b1001 .
0"
#46
b11111111 !
b11111111 %
b11111111 3
b11111111 5
b0 )
b0 8
b0 ;
b1001 (
b1001 -
b1001 0
b1001 <
1"
#48
b1010 &
b1010 ,
b1010 .
0"
#50
b1010 (
b1010 -
b1010 0
b1010 <
1"
#52
b1011 &
b1011 ,
b1011 .
0"
#54
b1011 (
b1011 -
b1011 0
b1011 <
1"
#56
b1100 &
b1100 ,
b1100 .
0"
#58
b1100 (
b1100 -
b1100 0
b1100 <
1"
#60
b1101 &
b1101 ,
b1101 .
0"
#62
b1101 (
b1101 -
b1101 0
b1101 <
1"
#63
1#
