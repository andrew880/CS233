$date
	Thu Sep 26 19:28:38 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module decoder_test $end
$var wire 1 ! writeenable $end
$var wire 1 " word_we $end
$var wire 1 # slt $end
$var wire 1 $ rd_src $end
$var wire 1 % mem_read $end
$var wire 1 & lui $end
$var wire 1 ' except $end
$var wire 2 ( control_type [1:0] $end
$var wire 1 ) byte_we $end
$var wire 1 * byte_load $end
$var wire 1 + alu_src2 $end
$var wire 3 , alu_op [2:0] $end
$var wire 1 - addm $end
$var reg 6 . funct [5:0] $end
$var reg 6 / opcode [5:0] $end
$var reg 1 0 zero $end
$scope module decoder $end
$var wire 1 1 add $end
$var wire 1 - addm $end
$var wire 1 2 al0 $end
$var wire 1 3 al1 $end
$var wire 1 4 al2 $end
$var wire 1 + alu_src2 $end
$var wire 1 * byte_load $end
$var wire 1 ) byte_we $end
$var wire 1 ' except $end
$var wire 6 5 funct [5:0] $end
$var wire 1 6 jr $end
$var wire 1 % mem_read $end
$var wire 1 7 nd $end
$var wire 1 8 nr $end
$var wire 6 9 opcode [5:0] $end
$var wire 1 : r $end
$var wire 1 $ rd_src $end
$var wire 1 # slt $end
$var wire 1 ; sub $end
$var wire 1 " word_we $end
$var wire 1 ! writeenable $end
$var wire 1 < xr $end
$var wire 1 0 zero $end
$var wire 1 = xri $end
$var wire 1 > sw $end
$var wire 1 ? sb $end
$var wire 1 @ ri $end
$var wire 1 A ndi $end
$var wire 1 B lw $end
$var wire 1 & lui $end
$var wire 1 C lbu $end
$var wire 1 D j $end
$var wire 2 E control_type [1:0] $end
$var wire 1 F bne $end
$var wire 1 G beq $end
$var wire 3 H alu_op [2:0] $end
$var wire 1 I adi $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0I
b10 H
0G
0F
b0 E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
b0 9
08
07
06
b100000 5
04
03
02
11
00
b0 /
b100000 .
0-
b10 ,
0+
0*
0)
b0 (
0'
0&
0%
0$
0#
0"
1!
$end
#10
b11 ,
b11 H
01
1;
b100010 .
b100010 5
#20
0!
13
b1 (
b1 E
0;
12
1G
b100 /
b100 9
#30
10
#40
